/*
 *	autogen/server/zone/objects/creature/events/CloakEventObserver.cpp generated by engine3 IDL compiler 0.70
 */

#include "CloakEventObserver.h"

#include "server/zone/objects/creature/CreatureObject.h"

/*
 *	CloakEventObserverStub
 */

enum {RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_ = 2487775280,RPC_GETPLAYER__};

CloakEventObserver::CloakEventObserver(CreatureObject* pl) : Observer(DummyConstructorParameter::instance()) {
	CloakEventObserverImplementation* _implementation = new CloakEventObserverImplementation(pl);
	_impl = _implementation;
	_impl->_setStub(this);
	_setClassName("CloakEventObserver");
}

CloakEventObserver::CloakEventObserver(DummyConstructorParameter* param) : Observer(param) {
	_setClassName("CloakEventObserver");
}

CloakEventObserver::~CloakEventObserver() {
}



int CloakEventObserver::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	CloakEventObserverImplementation* _implementation = static_cast<CloakEventObserverImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_);
		method.addUnsignedIntParameter(eventType);
		method.addObjectParameter(observable);
		method.addObjectParameter(arg1);
		method.addSignedLongParameter(arg2);

		return method.executeWithSignedIntReturn();
	} else {
		return _implementation->notifyObserverEvent(eventType, observable, arg1, arg2);
	}
}

ManagedWeakReference<CreatureObject* > CloakEventObserver::getPlayer() const {
	CloakEventObserverImplementation* _implementation = static_cast<CloakEventObserverImplementation*>(_getImplementationForRead());
	if (unlikely(_implementation == NULL)) {
		if (!deployed)
			throw ObjectNotDeployedException(this);

		DistributedMethod method(this, RPC_GETPLAYER__);

		return static_cast<CreatureObject*>(method.executeWithObjectReturn());
	} else {
		return _implementation->getPlayer();
	}
}

DistributedObjectServant* CloakEventObserver::_getImplementation() {

	 if (!_updated) _updated = true;
	return _impl;
}

DistributedObjectServant* CloakEventObserver::_getImplementationForRead() const {
	return _impl;
}

void CloakEventObserver::_setImplementation(DistributedObjectServant* servant) {
	_impl = servant;
}

/*
 *	CloakEventObserverImplementation
 */

CloakEventObserverImplementation::CloakEventObserverImplementation(DummyConstructorParameter* param) : ObserverImplementation(param) {
	_initializeImplementation();
}


CloakEventObserverImplementation::~CloakEventObserverImplementation() {
}


void CloakEventObserverImplementation::finalize() {
}

void CloakEventObserverImplementation::_initializeImplementation() {
	_setClassHelper(CloakEventObserverHelper::instance());

	_this = NULL;

	_serializationHelperMethod();
}

void CloakEventObserverImplementation::_setStub(DistributedObjectStub* stub) {
	_this = static_cast<CloakEventObserver*>(stub);
	ObserverImplementation::_setStub(stub);
}

DistributedObjectStub* CloakEventObserverImplementation::_getStub() {
	return _this.get();
}

CloakEventObserverImplementation::operator const CloakEventObserver*() {
	return _this.get();
}

void CloakEventObserverImplementation::lock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->lock(doLock);
}

void CloakEventObserverImplementation::lock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->lock(obj);
}

void CloakEventObserverImplementation::rlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->rlock(doLock);
}

void CloakEventObserverImplementation::wlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->wlock(doLock);
}

void CloakEventObserverImplementation::wlock(ManagedObject* obj) {
	_this.getReferenceUnsafeStaticCast()->wlock(obj);
}

void CloakEventObserverImplementation::unlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->unlock(doLock);
}

void CloakEventObserverImplementation::runlock(bool doLock) {
	_this.getReferenceUnsafeStaticCast()->runlock(doLock);
}

void CloakEventObserverImplementation::_serializationHelperMethod() {
	ObserverImplementation::_serializationHelperMethod();

	_setClassName("CloakEventObserver");

}

void CloakEventObserverImplementation::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CloakEventObserverImplementation::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

	initializeTransientMembers();
}

bool CloakEventObserverImplementation::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverImplementation::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xcf4bde64: //CloakEventObserver.player
		TypeInfo<ManagedWeakReference<CreatureObject* > >::parseFromBinaryStream(&player, stream);
		return true;

	}

	return false;
}

void CloakEventObserverImplementation::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CloakEventObserverImplementation::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CloakEventObserverImplementation::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverImplementation::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	_nameHashCode = 0xcf4bde64; //CloakEventObserver.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObject* > >::toBinaryStream(&player, stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;


	return _count;
}

CloakEventObserverImplementation::CloakEventObserverImplementation(CreatureObject* pl) {
	_initializeImplementation();
	// server/zone/objects/creature/events/CloakEventObserver.idl():   player = pl;
	player = pl;
	// server/zone/objects/creature/events/CloakEventObserver.idl():   Logger.setLoggingName("CloakEventObserver");
	Logger::setLoggingName("CloakEventObserver");
	// server/zone/objects/creature/events/CloakEventObserver.idl():   Logger.setLogging(true);
	Logger::setLogging(true);
}

ManagedWeakReference<CreatureObject* > CloakEventObserverImplementation::getPlayer() const{
	// server/zone/objects/creature/events/CloakEventObserver.idl():   return player;
	return player;
}

/*
 *	CloakEventObserverAdapter
 */


#include "engine/orb/messages/InvokeMethodMessage.h"


CloakEventObserverAdapter::CloakEventObserverAdapter(CloakEventObserver* obj) : ObserverAdapter(obj) {
}

void CloakEventObserverAdapter::invokeMethod(uint32 methid, DistributedMethod* inv) {
	DOBMessage* resp = inv->getInvocationMessage();

	switch (methid) {
	case RPC_NOTIFYOBSERVEREVENT__INT_OBSERVABLE_MANAGEDOBJECT_LONG_:
		{
			unsigned int eventType = inv->getUnsignedIntParameter();
			Observable* observable = static_cast<Observable*>(inv->getObjectParameter());
			ManagedObject* arg1 = static_cast<ManagedObject*>(inv->getObjectParameter());
			long long arg2 = inv->getSignedLongParameter();
			
			int _m_res = notifyObserverEvent(eventType, observable, arg1, arg2);
			resp->insertSignedInt(_m_res);
		}
		break;
	case RPC_GETPLAYER__:
		{
			
			DistributedObject* _m_res = getPlayer().get();
			resp->insertLong(_m_res == NULL ? 0 : _m_res->_getObjectID());
		}
		break;
	default:
		ObserverAdapter::invokeMethod(methid, inv);
	}
}

int CloakEventObserverAdapter::notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2) {
	return (static_cast<CloakEventObserver*>(stub))->notifyObserverEvent(eventType, observable, arg1, arg2);
}

ManagedWeakReference<CreatureObject* > CloakEventObserverAdapter::getPlayer() const {
	return (static_cast<CloakEventObserver*>(stub))->getPlayer();
}

/*
 *	CloakEventObserverHelper
 */

CloakEventObserverHelper* CloakEventObserverHelper::staticInitializer = CloakEventObserverHelper::instance();

CloakEventObserverHelper::CloakEventObserverHelper() {
	className = "CloakEventObserver";

	Core::getObjectBroker()->registerClass(className, this);
}

void CloakEventObserverHelper::finalizeHelper() {
	CloakEventObserverHelper::finalize();
}

DistributedObject* CloakEventObserverHelper::instantiateObject() {
	return new CloakEventObserver(DummyConstructorParameter::instance());
}

DistributedObjectServant* CloakEventObserverHelper::instantiateServant() {
	return new CloakEventObserverImplementation(DummyConstructorParameter::instance());
}

DistributedObjectPOD* CloakEventObserverHelper::instantiatePOD() {
	return new CloakEventObserverPOD();
}

DistributedObjectAdapter* CloakEventObserverHelper::createAdapter(DistributedObjectStub* obj) {
	DistributedObjectAdapter* adapter = new CloakEventObserverAdapter(static_cast<CloakEventObserver*>(obj));

	obj->_setClassName(className);
	obj->_setClassHelper(this);

	adapter->setStub(obj);

	return adapter;
}

/*
 *	CloakEventObserverPOD
 */

CloakEventObserverPOD::~CloakEventObserverPOD() {
}

CloakEventObserverPOD::CloakEventObserverPOD(void) {
	_className = "CloakEventObserver";
}


void CloakEventObserverPOD::writeObject(ObjectOutputStream* stream) {
	int _currentOffset = stream->getOffset();
	stream->writeShort(0);
	int _varCount = CloakEventObserverPOD::writeObjectMembers(stream);
	stream->writeShort(_currentOffset, _varCount);
}

int CloakEventObserverPOD::writeObjectMembers(ObjectOutputStream* stream) {
	int _count = ObserverPOD::writeObjectMembers(stream);

	uint32 _nameHashCode;
	int _offset;
	uint32 _totalSize;
	if (player) {
	_nameHashCode = 0xcf4bde64; //CloakEventObserver.player
	TypeInfo<uint32>::toBinaryStream(&_nameHashCode, stream);
	_offset = stream->getOffset();
	stream->writeInt(0);
	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);
	_totalSize = (uint32) (stream->getOffset() - (_offset + 4));
	stream->writeInt(_offset, _totalSize);
	_count++;
	}


	return _count;
}

bool CloakEventObserverPOD::readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode) {
	if (ObserverPOD::readObjectMember(stream, nameHashCode))
		return true;

	switch(nameHashCode) {
	case 0xcf4bde64: //CloakEventObserver.player
		{
			ManagedWeakReference<CreatureObjectPOD* > _mnplayer;
			TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::parseFromBinaryStream(&_mnplayer, stream);
			player = std::move(_mnplayer);
		}
		return true;

	}

	return false;
}

void CloakEventObserverPOD::readObject(ObjectInputStream* stream) {
	uint16 _varCount = stream->readShort();
	for (int i = 0; i < _varCount; ++i) {
		uint32 _nameHashCode;
		TypeInfo<uint32>::parseFromBinaryStream(&_nameHashCode, stream);

		uint32 _varSize = stream->readInt();

		int _currentOffset = stream->getOffset();

		if(CloakEventObserverPOD::readObjectMember(stream, _nameHashCode)) {
		}

		stream->setOffset(_currentOffset + _varSize);
	}

}

void CloakEventObserverPOD::writeObjectCompact(ObjectOutputStream* stream) {
	ObserverPOD::writeObjectCompact(stream);

	TypeInfo<ManagedWeakReference<CreatureObjectPOD* > >::toBinaryStream(&player.value(), stream);


}

