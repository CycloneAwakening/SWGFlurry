/*
 *	autogen/server/zone/objects/creature/events/CloakEventObserver.h generated by engine3 IDL compiler 0.70
 */

#ifndef CLOAKEVENTOBSERVER_H_
#define CLOAKEVENTOBSERVER_H_

#include "engine/core/Core.h"

#include "engine/core/ManagedReference.h"

#include "engine/core/ManagedWeakReference.h"

#include "system/util/Optional.h"

#ifndef likely
#ifdef __GNUC__
#define likely(x)       __builtin_expect(!!(x), 1)
#define unlikely(x)     __builtin_expect(!!(x), 0)
#else
#define likely(x)       (x)
#define unlikely(x)     (x)
#endif
#endif
#include "engine/util/json_utils.h"

namespace server {
namespace zone {
namespace objects {
namespace creature {

class CreatureObject;

class CreatureObjectPOD;

} // namespace creature
} // namespace objects
} // namespace zone
} // namespace server

using namespace server::zone::objects::creature;

#include "engine/core/ManagedObject.h"

#include "templates/params/ObserverEventType.h"

#include "engine/log/Logger.h"

#include "engine/core/ManagedReference.h"

#include "system/lang/ref/Reference.h"

#include "engine/util/Observer.h"

#include "engine/util/Observable.h"

class CloakEventObserver : public Observer {
public:
	CloakEventObserver(CreatureObject* pl);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	ManagedWeakReference<CreatureObject* > getPlayer() const;

	DistributedObjectServant* _getImplementation();
	DistributedObjectServant* _getImplementationForRead() const;

	void _setImplementation(DistributedObjectServant* servant);

protected:
	CloakEventObserver(DummyConstructorParameter* param);

	virtual ~CloakEventObserver();

	friend class CloakEventObserverHelper;
};

class CloakEventObserverImplementation : public ObserverImplementation, public Logger {
protected:
	ManagedWeakReference<CreatureObject* > player;

public:
	CloakEventObserverImplementation(CreatureObject* pl);

	CloakEventObserverImplementation(DummyConstructorParameter* param);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	ManagedWeakReference<CreatureObject* > getPlayer() const;

	WeakReference<CloakEventObserver*> _this;

	operator const CloakEventObserver*();

	DistributedObjectStub* _getStub();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
protected:
	virtual ~CloakEventObserverImplementation();

	void finalize();

	void _initializeImplementation();

	void _setStub(DistributedObjectStub* stub);

	void lock(bool doLock = true);

	void lock(ManagedObject* obj);

	void rlock(bool doLock = true);

	void wlock(bool doLock = true);

	void wlock(ManagedObject* obj);

	void unlock(bool doLock = true);

	void runlock(bool doLock = true);

	void _serializationHelperMethod();
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);

	friend class CloakEventObserver;
};

class CloakEventObserverAdapter : public ObserverAdapter {
public:
	CloakEventObserverAdapter(CloakEventObserver* impl);

	void invokeMethod(sys::uint32 methid, DistributedMethod* method);

	int notifyObserverEvent(unsigned int eventType, Observable* observable, ManagedObject* arg1, long long arg2);

	ManagedWeakReference<CreatureObject* > getPlayer() const;

};

class CloakEventObserverHelper : public DistributedObjectClassHelper, public Singleton<CloakEventObserverHelper> {
	static CloakEventObserverHelper* staticInitializer;

public:
	CloakEventObserverHelper();

	void finalizeHelper();

	DistributedObject* instantiateObject();

	DistributedObjectPOD* instantiatePOD();

	DistributedObjectServant* instantiateServant();

	DistributedObjectAdapter* createAdapter(DistributedObjectStub* obj);

	friend class Singleton<CloakEventObserverHelper>;
};

class CloakEventObserverPOD : public ObserverPOD {
public:
	Optional<ManagedWeakReference<CreatureObjectPOD* >> player;

	String _className;
	CloakEventObserverPOD();
	virtual void readObject(ObjectInputStream* stream);
	virtual void writeObject(ObjectOutputStream* stream);
	bool readObjectMember(ObjectInputStream* stream, const uint32& nameHashCode);
	int writeObjectMembers(ObjectOutputStream* stream);
	void writeObjectCompact(ObjectOutputStream* stream);



	virtual ~CloakEventObserverPOD();

};

#endif /*CLOAKEVENTOBSERVERPOD_H_*/
